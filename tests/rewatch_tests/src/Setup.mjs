// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodepath from "node:path";
import * as Stdlib_Promise from "@rescript/runtime/lib/es6/Stdlib_Promise.js";
import * as Promises from "node:fs/promises";
import * as ProcessJs from "../../../lib_dev/process.js";

function deno(prim0, prim1) {
  return ProcessJs.deno(prim0, prim1);
}

function node(prim0, prim1, prim2) {
  return ProcessJs.node(prim0, prim1, prim2);
}

function git(prim0, prim1) {
  return ProcessJs.git(prim0, prim1);
}

function npm(prim0, prim1) {
  return ProcessJs.npm(prim0, prim1);
}

let rescriptJs = Nodepath.resolve(import.meta.dirname, "../../../cli/rescript.js");

async function commands(workingDirectory, runtimeOpt) {
  let runtime = runtimeOpt !== undefined ? runtimeOpt : "node";
  let pwdExists = await Stdlib_Promise.$$catch(Promises.access(workingDirectory).then(() => true), param => Promise.resolve(false));
  if (!pwdExists) {
    throw {
      RE_EXN_ID: "Failure",
      _1: "Working directory does not exist: " + workingDirectory,
      Error: new Error()
    };
  }
  let build = async () => {
    switch (runtime) {
      case "deno" :
        await ProcessJs.deno([
          "--allow-read",
          "--allow-env",
          "--allow-run",
          rescriptJs
        ], {
          cwd: workingDirectory,
          stdio: "inherit"
        });
        return;
      case "node" :
        await ProcessJs.node(rescriptJs, ["build"], {
          cwd: workingDirectory,
          stdio: "inherit"
        });
        return;
      case "bun" :
        throw {
          RE_EXN_ID: "Failure",
          _1: "Bun is not supported yet",
          Error: new Error()
        };
    }
  };
  let clean = async () => {
    switch (runtime) {
      case "deno" :
        await ProcessJs.deno([
          "--allow-read",
          "--allow-env",
          "--allow-run",
          rescriptJs,
          "clean"
        ], {
          cwd: workingDirectory,
          stdio: "inherit"
        });
        return;
      case "node" :
        await ProcessJs.node(rescriptJs, ["clean"], {
          cwd: workingDirectory,
          stdio: "inherit"
        });
        return;
      case "bun" :
        throw {
          RE_EXN_ID: "Failure",
          _1: "Bun is not supported yet",
          Error: new Error()
        };
    }
  };
  let rescript = {
    build: build,
    clean: clean
  };
  let install = async () => {
    await ProcessJs.npm(["install"], {
      cwd: workingDirectory,
      stdio: "inherit"
    });
  };
  let npm = {
    install: install
  };
  let install$1 = async () => {
    await ProcessJs.deno(["install"], {
      cwd: workingDirectory,
      stdio: "inherit"
    });
  };
  let deno = {
    install: install$1
  };
  let checkout = async () => {
    await ProcessJs.git([
      "checkout",
      "."
    ], {
      cwd: workingDirectory,
      stdio: "inherit"
    });
  };
  return {
    rescript: rescript,
    npm: npm,
    git: {
      checkout: checkout
    },
    deno: deno
  };
}

function sleep(ms) {
  return new Promise((res, param) => {
    setTimeout(res, ms);
  });
}

export {
  deno,
  node,
  git,
  npm,
  rescriptJs,
  commands,
  sleep,
}
/* rescriptJs Not a pure module */
