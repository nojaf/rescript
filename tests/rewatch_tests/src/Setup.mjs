// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib_Promise from "@rescript/runtime/lib/es6/Stdlib_Promise.js";
import * as Promises from "node:fs/promises";

let base = import.meta.url;

let fileUrl = new URL("../../../lib_dev/process.js", base).toString();

let processUtils = await import(fileUrl);

async function commands(workingDirectory) {
  let pwdExists = await Stdlib_Promise.$$catch(Promises.access(workingDirectory).then(() => true), param => Promise.resolve(false));
  if (!pwdExists) {
    throw {
      RE_EXN_ID: "Failure",
      _1: "Working directory does not exist: " + workingDirectory,
      Error: new Error()
    };
  }
  let build = async () => {
    await processUtils.rewatch("build", [], {
      cwd: workingDirectory,
      stdio: "inherit"
    });
  };
  let clean = async () => {
    await processUtils.rewatch("clean", [], {
      cwd: workingDirectory,
      stdio: "inherit"
    });
  };
  let rescript = {
    build: build,
    clean: clean
  };
  let install = async () => {
    await processUtils.npm(["install"], {
      cwd: workingDirectory
    });
  };
  let npm = {
    install: install
  };
  let install$1 = async () => {
    await processUtils.deno(["install"], {
      cwd: workingDirectory
    });
  };
  let deno = {
    install: install$1
  };
  let checkout = async () => {
    await processUtils.git([
      "checkout",
      "."
    ], {
      cwd: workingDirectory
    });
  };
  return {
    rescript: rescript,
    npm: npm,
    git: {
      checkout: checkout
    },
    deno: deno
  };
}

function sleep(ms) {
  return new Promise((res, param) => {
    setTimeout(res, ms);
  });
}

export {
  processUtils,
  commands,
  sleep,
}
/* base Not a pure module */
