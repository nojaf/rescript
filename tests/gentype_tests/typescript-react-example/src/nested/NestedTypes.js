// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Belt_List = require("rescript/lib/js/Belt_List.js");
let Belt_Option = require("rescript/lib/js/Belt_Option.js");

function swap(tree) {
  return {
    label: tree.label,
    left: Belt_Option.map(tree.right, swap),
    right: Belt_Option.map(tree.left, swap)
  };
}

function selfRecursiveConverter(param) {
  return param.self;
}

function mutuallyRecursiveConverter(param) {
  return param.b;
}

function testFunctionOnOptionsAsArgument(a, foo) {
  return foo(a);
}

function jsonStringify(prim) {
  return JSON.stringify(prim);
}

function testConvertNull(x) {
  return x;
}

function testConvertLocation(x) {
  return x;
}

let testMarshalFields = {
  _rec: "rec",
  _switch: "_switch",
  switch: "switch",
  __: "__",
  ___: "_",
  foo__: "foo",
  _foo__: "_foo",
  _Uppercase: "Uppercase",
  _Uppercase__: "_Uppercase"
};

function setMatch(x) {
  x._match = 34;
}

function testInstantiateTypeParameter(x) {
  return x;
}

let currentTime = new Date();

let optFunction = () => 3;

let ObjectId = {};

let someIntList = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
};

let map = Belt_List.map;

let stringT = "a";

let jsStringT = "a";

let jsString2T = "a";

exports.someIntList = someIntList;
exports.map = map;
exports.swap = swap;
exports.selfRecursiveConverter = selfRecursiveConverter;
exports.mutuallyRecursiveConverter = mutuallyRecursiveConverter;
exports.testFunctionOnOptionsAsArgument = testFunctionOnOptionsAsArgument;
exports.stringT = stringT;
exports.jsStringT = jsStringT;
exports.jsString2T = jsString2T;
exports.jsonStringify = jsonStringify;
exports.testConvertNull = testConvertNull;
exports.testConvertLocation = testConvertLocation;
exports.testMarshalFields = testMarshalFields;
exports.setMatch = setMatch;
exports.testInstantiateTypeParameter = testInstantiateTypeParameter;
exports.currentTime = currentTime;
exports.optFunction = optFunction;
exports.ObjectId = ObjectId;
/* currentTime Not a pure module */
